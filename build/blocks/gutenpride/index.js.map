{"version":3,"file":"blocks/gutenpride/index.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;;;;;ACAe;AACf;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCbA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,eAAe,4BAA4B;WAC3C,eAAe;WACf,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;ACNsD;AACjB;AACe;AAMnB;AAEjCA,oEAAiB,CAAE,uCAAuC,EAAE;EACxDM,UAAU,EAAE,CAAC;EACbC,KAAK,EAAE,qBAAqB;EAC5BC,IAAI,EAAE,sBAAsB;EAC5BC,QAAQ,EAAE,QAAQ;EAClBC,UAAU,EAAE;IACRC,OAAO,EAAE;MACLC,IAAI,EAAE,QAAQ;MACdC,MAAM,EAAE,MAAM;MACdC,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE,EAAE,CAAE;IACjB,CAAC;;IACDC,QAAQ,EAAE;MAAEJ,IAAI,EAAE,QAAQ;MAAEG,OAAO,EAAE;IAAU,CAAC;IAChDE,UAAU,EAAE;MAAEL,IAAI,EAAE,QAAQ;MAAEG,OAAO,EAAE;IAAU;EACrD,CAAC;EACDG,IAAI,EAAE,QAAqC;IAAA,IAAnC;MAAER,UAAU;MAAES;IAAc,CAAC;IACjC,MAAMC,eAAe,GAAKC,QAAQ,IAAM;MACpCF,aAAa,CAAE;QAAEH,QAAQ,EAAEK;MAAS,CAAC,CAAE;IAC3C,CAAC;IAED,MAAMC,iBAAiB,GAAKD,QAAQ,IAAM;MACtCF,aAAa,CAAE;QAAEF,UAAU,EAAEI;MAAS,CAAC,CAAE;IAC7C,CAAC;IAED,OACI,yEAAUlB,sEAAa,EAAE,EACrB,kEAAC,sEAAiB;MAAC,GAAG,EAAC;IAAS,GAC5B;MAAK,EAAE,EAAC;IAAqB,GACzB,oFACI;MAAQ,SAAS,EAAC;IAA4B,GACxCF,mDAAE,CAAE,kBAAkB,EAAE,YAAY,CAAE,CACnC,EACT,kEAAC,iEAAY;MACT,QAAQ,EAAGmB;IAAiB,EAC9B,CACK,EACX,oFACI;MAAQ,SAAS,EAAC;IAA4B,GACxCnB,mDAAE,CAAE,YAAY,EAAE,YAAY,CAAE,CAC7B,EACT,kEAAC,iEAAY;MACT,QAAQ,EAAGqB;IAAmB,EAChC,CACK,CACT,CACU,EACpB,kEAAC,8DAAW;MACR,KAAK,EAAGZ,UAAU,CAACC,OAAS;MAC5B,QAAQ,EAAKY,GAAG,IAAMJ,aAAa,CAAE;QAAER,OAAO,EAAEY;MAAI,CAAC,CAAI;MACzD,KAAK,EAAG;QACJC,eAAe,EAAEd,UAAU,CAACM,QAAQ;QACpCS,KAAK,EAAEf,UAAU,CAACO;MACtB;IAAG,EACL,CACA;EAEd,CAAC;EACDS,IAAI,EAAE,SAAsB;IAAA,IAApB;MAAEhB;IAAW,CAAC;IAClB,OACI,wJACSP,uEAAkB,EAAE;MACzB,KAAK,EAAG;QACJqB,eAAe,EAAEd,UAAU,CAACM,QAAQ;QACpCS,KAAK,EAAEf,UAAU,CAACO;MACtB;IAAG,IAEDP,UAAU,CAACC,OAAO,CAClB;EAEd;AACJ,CAAC,CAAE,C","sources":["webpack://react-wordpress/external window [\"wp\",\"blockEditor\"]","webpack://react-wordpress/external window [\"wp\",\"blocks\"]","webpack://react-wordpress/external window [\"wp\",\"components\"]","webpack://react-wordpress/external window [\"wp\",\"element\"]","webpack://react-wordpress/external window [\"wp\",\"i18n\"]","webpack://react-wordpress/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://react-wordpress/webpack/bootstrap","webpack://react-wordpress/webpack/runtime/compat get default export","webpack://react-wordpress/webpack/runtime/define property getters","webpack://react-wordpress/webpack/runtime/hasOwnProperty shorthand","webpack://react-wordpress/webpack/runtime/make namespace object","webpack://react-wordpress/./src/blocks/gutenpride/index.tsx"],"sourcesContent":["module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\r\nimport { __ } from '@wordpress/i18n';\r\nimport { TextControl } from '@wordpress/components';\r\n\r\nimport {\r\n    useBlockProps,\r\n    ColorPalette,\r\n    InspectorControls,\r\n} from '@wordpress/block-editor';\r\n\r\nregisterBlockType( 'gutenberg-examples/example-gutenpride', {\r\n    apiVersion: 2,\r\n    title: 'Example: Gutenpride',\r\n    icon: 'universal-access-alt',\r\n    category: 'design',\r\n    attributes: {\r\n        message: {\r\n            type: 'string',\r\n            source: 'text',\r\n            selector: 'div',\r\n            default: '', // empty default\r\n        },\r\n        bg_color: { type: 'string', default: '#000000' },\r\n        text_color: { type: 'string', default: '#ffffff' },\r\n    },\r\n    edit: ( { attributes, setAttributes } ) => {\r\n        const onChangeBGColor = ( hexColor ) => {\r\n            setAttributes( { bg_color: hexColor } );\r\n        };\r\n\r\n        const onChangeTextColor = ( hexColor ) => {\r\n            setAttributes( { text_color: hexColor } );\r\n        };\r\n\r\n        return (\r\n            <div { ...useBlockProps() }>\r\n                <InspectorControls key=\"setting\">\r\n                    <div id=\"gutenpride-controls\">\r\n                        <fieldset>\r\n                            <legend className=\"blocks-base-control__label\">\r\n                                { __( 'Background color', 'gutenpride' ) }\r\n                            </legend>\r\n                            <ColorPalette\r\n                                onChange={ onChangeBGColor }\r\n                            />\r\n                        </fieldset>\r\n                        <fieldset>\r\n                            <legend className=\"blocks-base-control__label\">\r\n                                { __( 'Text color', 'gutenpride' ) }\r\n                            </legend>\r\n                            <ColorPalette\r\n                                onChange={ onChangeTextColor }\r\n                            />\r\n                        </fieldset>\r\n                    </div>\r\n                </InspectorControls>\r\n                <TextControl\r\n                    value={ attributes.message }\r\n                    onChange={ ( val ) => setAttributes( { message: val } ) }\r\n                    style={ {\r\n                        backgroundColor: attributes.bg_color,\r\n                        color: attributes.text_color,\r\n                    } }\r\n                />\r\n            </div>\r\n        );\r\n    },\r\n    save: ( { attributes } ) => {\r\n        return (\r\n            <div\r\n                { ...useBlockProps.save() }\r\n                style={ {\r\n                    backgroundColor: attributes.bg_color,\r\n                    color: attributes.text_color,\r\n                } }\r\n            >\r\n                { attributes.message }\r\n            </div>\r\n        );\r\n    },\r\n} );"],"names":["registerBlockType","__","TextControl","useBlockProps","ColorPalette","InspectorControls","apiVersion","title","icon","category","attributes","message","type","source","selector","default","bg_color","text_color","edit","setAttributes","onChangeBGColor","hexColor","onChangeTextColor","val","backgroundColor","color","save"],"sourceRoot":""}